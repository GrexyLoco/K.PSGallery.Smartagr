name: 🚀 Smart PowerShell Module Release Pipeline

# 🎯 Triggers: Push to master branch (e.g., PR merge)
# 📋 Required Repository Variables:
# - UBUNTU_VERSION: Ubuntu runner version (e.g., "ubuntu-22.04")
# - MODULE_NAME: PowerShell module name for dispatch
# - TARGET_REPOSITORY: Target repository for auto-publish dispatch
# 📋 Required Repository Secrets:
# - REPO_DISPATCH_TOKEN: Personal Access Token for cross-repo dispatch

on:
  push:
    branches: [master, main]
  workflow_dispatch:
    # Optional manual trigger for testing
    inputs:
      test:
        description: "Run validation only (no dispatch)"
        required: false
        default: false
        type: boolean

env:
  # 🌍 Global environment variables for consistency
  RELEASE_AUTHOR: "github-actions[bot]"
  RELEASE_EMAIL: "github-actions[bot]@users.noreply.github.com"
  # 📦 Module Configuration (can be overridden by repository variables)
  MODULE_NAME: ${{ vars.MODULE_NAME || 'K.PSGallery.SmartAgr' }}
  TARGET_REPOSITORY: ${{ vars.TARGET_REPOSITORY || 'GrexyLoco/K.PSGallery' }}

jobs:
  quality-gate:
    name: 🔐 Quality Gate
    runs-on: ${{ vars.UBUNTU_VERSION || 'ubuntu-22.04' }}
    outputs:
      test-success: ${{ steps.validation.outputs.test-success }}
      total-tests: ${{ steps.validation.outputs.total-tests }}
      passed-tests: ${{ steps.validation.outputs.passed-tests }}
      failed-tests: ${{ steps.validation.outputs.failed-tests }}
      skipped-tests: ${{ steps.validation.outputs.skipped-tests }}
      test-duration: ${{ steps.validation.outputs.test-duration }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 Validate PowerShell Module
        id: validation
        uses: GrexyLoco/K.Actions.PSModuleValidation@v1.0.1
        with:
          test-path: "./Tests"
          output-path: "./TestResults.xml"
          validate-all-codebase: "false"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          module-name: ${{ env.MODULE_NAME }}

  version-and-tag:
    name: 📦 Version & Tag
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.test-success == 'true'
    outputs:
      new-version: ${{ steps.version.outputs.newVersion }}
      current-version: ${{ steps.version.outputs.currentVersion }}
      bump-type: ${{ steps.version.outputs.bumpType }}
      last-release-tag: ${{ steps.version.outputs.lastReleaseTag }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Calculate next version
        id: version
        uses: GrexyLoco/K.Actions.NextVersion@v1
        with:
          manifestPath: './K.PSGallery.Smartagr.psd1'
          branchName: ${{ github.ref_name }}
          targetBranch: 'master'

      - name: 📝 Update Manifest Version
        if: steps.version.outputs.newVersion != ''
        shell: pwsh
        run: |
          $manifestPath = './K.PSGallery.Smartagr.psd1'
          $newVersion = '${{ steps.version.outputs.newVersion }}'
          
          Write-Host "🔄 Updating manifest version to $newVersion..."
          
          # Read current manifest
          $content = Get-Content $manifestPath -Raw
          
          # Update ModuleVersion with regex
          $updatedContent = $content -replace "ModuleVersion\s*=\s*'[^']*'", "ModuleVersion = '$newVersion'"
          
          # Verify the replacement worked
          if ($updatedContent -notmatch "ModuleVersion\s*=\s*'$newVersion'") {
            Write-Error "❌ MANIFEST UPDATE FAILED!"
            Write-Error ""
            Write-Error "⚠️  CRITICAL: Das Manifest konnte nicht aktualisiert werden."
            Write-Error "    Dies führt zu einem Konflikt zwischen Git-Tags und Manifest-Version."
            Write-Error ""
            Write-Error "📋 Mögliche Ursachen:"
            Write-Error "    • ModuleVersion-Format im Manifest ist ungültig"
            Write-Error "    • Regex-Pattern konnte Version nicht finden"
            Write-Error "    • Datei ist schreibgeschützt"
            Write-Error ""
            Write-Error "🔧 Manuelle Lösung erforderlich:"
            Write-Error "    1. Prüfe K.PSGallery.Smartagr.psd1 auf korrekte ModuleVersion-Syntax"
            Write-Error "    2. Aktualisiere ModuleVersion manuell auf '$newVersion'"
            Write-Error "    3. Commit mit Message: 'chore: update manifest to $newVersion [skip ci]'"
            Write-Error ""
            exit 1
          }
          
          # Write updated content back
          Set-Content -Path $manifestPath -Value $updatedContent -NoNewline
          
          Write-Host "✅ Manifest successfully updated to version $newVersion"
          
          # Configure git
          git config user.name "${{ env.RELEASE_AUTHOR }}"
          git config user.email "${{ env.RELEASE_EMAIL }}"
          
          # Commit the updated manifest
          git add $manifestPath
          git commit -m "chore: update manifest to $newVersion [skip ci]"
          git push origin ${{ github.ref_name }}
          
          Write-Host "✅ Manifest changes committed and pushed"

      - name: 🏷️ Create Git Tag
        if: steps.version.outputs.newVersion != ''
        run: |
          git config user.name "${{ env.RELEASE_AUTHOR }}"
          git config user.email "${{ env.RELEASE_EMAIL }}"
          
          # Check if tag already exists
          if git rev-parse "v${{ steps.version.outputs.newVersion }}" >/dev/null 2>&1; then
            echo "❌ ERROR: Tag v${{ steps.version.outputs.newVersion }} already exists!"
            echo ""
            echo "⚠️  MANIFEST-TAG-KONFLIKT ERKANNT"
            echo "    Das Tag v${{ steps.version.outputs.newVersion }} existiert bereits, aber das"
            echo "    Manifest wurde nicht entsprechend aktualisiert."
            echo ""
            echo "📋 Mögliche Ursachen:"
            echo "    • Vorheriger Workflow-Run hat Tag erstellt, aber Manifest-Update fehlgeschlagen"
            echo "    • Manueller Tag-Push ohne Manifest-Update"
            echo "    • Manifest wurde nach Tag-Erstellung zurückgesetzt"
            echo ""
            echo "🔧 Lösungsvorschläge:"
            echo "    1. Lösche das existierende Tag: git push --delete origin v${{ steps.version.outputs.newVersion }}"
            echo "    2. Oder: Aktualisiere Manifest manuell auf ${{ steps.version.outputs.newVersion }} und pushe mit [skip ci]"
            echo "    3. Dann: Starte den Workflow erneut"
            echo ""
            exit 1
          fi
          
          git tag -a "v${{ steps.version.outputs.newVersion }}" -m "Release v${{ steps.version.outputs.newVersion }}"
          git push origin "v${{ steps.version.outputs.newVersion }}"
          
          echo "✅ Tag v${{ steps.version.outputs.newVersion }} successfully created"

      - name: 📝 Release Summary
        if: always()
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 📦 Version Calculation

          **Current Version:** `${{ steps.version.outputs.currentVersion }}`
          **New Version:** `${{ steps.version.outputs.newVersion }}`
          **Bump Type:** `${{ steps.version.outputs.bumpType }}`
          **Last Release Tag:** `${{ steps.version.outputs.lastReleaseTag }}`

          ---
          EOF

  trigger-publish:
    name: 🚀 Trigger Publish via Repo Dispatch (K.PSGallery)
    runs-on: ubuntu-latest
    needs: [quality-gate, version-and-tag]
    if: needs.quality-gate.outputs.test-success == 'true' && needs.version-and-tag.outputs.new-version != ''
    steps:
      - name: 📤 Dispatch to auto-publish workflow
        uses: peter-evans/repository-dispatch@v4
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ env.TARGET_REPOSITORY }}
          event-type: publish_module
          client-payload: |
            {
              "repo": "${{ github.repository }}",
              "tag": "v${{ needs.version-and-tag.outputs.new-version }}",
              "bump_type": "${{ needs.version-and-tag.outputs.bump-type }}",
              "triggered_by": "${{ github.actor }}",
              "source_url": "https://github.com/${{ github.repository }}",
              "gallery_url": "https://www.powershellgallery.com/packages/${{ env.MODULE_NAME }}/${{ needs.version-and-tag.outputs.new-version }}"
            }

      - name: 📝 Dispatch Summary
        if: always()
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🚀 Auto-Publish Pipeline Triggered

          **Module:** `${{ env.MODULE_NAME }}`
          **Target Repository:** `${{ env.TARGET_REPOSITORY }}`
          **Source Repository:** `${{ github.repository }}`
          **Branch:** `${{ github.ref_name }}`
          **Status:** ✅ Dispatch sent successfully

          The auto-publish pipeline will now handle:
          - 🔢 Semantic version calculation
          - 📦 Module packaging
          - 🚀 PowerShell Gallery publishing
          - 🏷️ GitHub release creation

          ---
          EOF
